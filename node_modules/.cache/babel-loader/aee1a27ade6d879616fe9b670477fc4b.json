{"ast":null,"code":"const defaultState = {\n  storage: {},\n  bedroom: {},\n  living: {},\n  other: {},\n  dining: {},\n  choices: {\n    storage: true,\n    bedroom: false,\n    living: false,\n    other: false,\n    dining: false\n  }\n};\nexport default ((state = defaultState, action) => {\n  const arr = ['storage', 'bedroom', 'living', 'other', 'dining'];\n\n  if (action.type === 'initDataAction') {\n    const newState = JSON.parse(JSON.stringify(state));\n\n    for (let i = 0; i < arr.length; i++) {\n      action.data[arr[i]].forEach(element => {\n        newState[arr[i]][element._uid] = {\n          date: element.date,\n          image: element.image,\n          content: element.content,\n          ig_handle: element.ig_handle\n        };\n      });\n    }\n\n    return newState;\n  }\n\n  if (action.type === 'changeChoice') {\n    const newState = JSON.parse(JSON.stringify(state));\n    newState.choices = action.value;\n    return newState;\n  }\n\n  if (action.type === 'addItem') {\n    const newState = JSON.parse(JSON.stringify(state));\n    let id = Math.random() * 10000;\n\n    while (newState.bedroom[id] || newState.living[id] || newState.storage[id] || newState.dining[id] || newState.other[id]) {\n      id = Math.random() * 10000;\n    }\n\n    newState[action.value.type][id] = {\n      date: action.value.date,\n      image: action.value.image,\n      content: action.value.content,\n      ig_handle: action.value.ig_handle\n    };\n    const cho = {\n      storage: false,\n      bedroom: false,\n      living: false,\n      other: false,\n      dining: false\n    };\n    cho[action.value.type];\n    return newState;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["/Users/cengqingzi/Desktop/React/my-app/src/store/reducer.js"],"names":["defaultState","storage","bedroom","living","other","dining","choices","state","action","arr","type","newState","JSON","parse","stringify","i","length","data","forEach","element","_uid","date","image","content","ig_handle","value","id","Math","random","cho"],"mappings":"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","sourcesContent":["\nconst defaultState = {\n    storage : {},\n    bedroom : {},\n    living : {},\n    other : {},\n    dining : {},\n    choices : {\n        storage : true,\n        bedroom: false,\n        living: false,\n        other: false,\n        dining: false\n    }\n}\nexport default(state = defaultState, action) =>{\n    const arr = ['storage', 'bedroom', 'living', 'other', 'dining'];\n    if(action.type === 'initDataAction'){\n        const newState = JSON.parse(JSON.stringify(state));\n        for(let i = 0; i< arr.length; i++){\n            action.data[arr[i]].forEach(element => {\n                newState[arr[i]][element._uid] = {\n                    date: element.date,\n                    image: element.image,\n                    content: element.content,\n                    ig_handle: element.ig_handle\n                }\n            });\n        }\n        return newState;\n    }\n    if(action.type === 'changeChoice'){\n        const newState = JSON.parse(JSON.stringify(state));\n        newState.choices = action.value;\n        return newState;\n    }\n    if(action.type === 'addItem'){\n        const newState = JSON.parse(JSON.stringify(state));\n        let id = Math.random()*10000;\n        while(newState.bedroom[id] || newState.living[id] || newState.storage[id] \n            || newState.dining[id] || newState.other[id]){\n            id = Math.random()*10000;\n        }\n        newState[action.value.type][id] = \n        {\n            date: action.value.date,\n            image: action.value.image,\n            content: action.value.content,\n            ig_handle: action.value.ig_handle\n        }\n        const cho = {\n            storage : false,\n            bedroom: false,\n            living: false,\n            other: false,\n            dining: false\n        }\n        cho[action.value.type] \n        return newState;\n    }\n    return state;\n}\n"]},"metadata":{},"sourceType":"module"}